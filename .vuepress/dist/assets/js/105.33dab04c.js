(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{192:function(t,n,a){"use strict";a.r(n);var r=a(0),e=Object(r.a)({},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"rpc-参考手册"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rpc-参考手册","aria-hidden":"true"}},[t._v("#")]),t._v(" RPC 参考手册")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#about"}},[t._v("about")])]),a("li",[a("a",{attrs:{href:"#account-change-for-crosschain"}},[t._v("accountchangefor_crosschain")])])])]),a("p"),t._v(" "),a("h1",{attrs:{id:"命令说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令说明","aria-hidden":"true"}},[t._v("#")]),t._v(" 命令说明")]),t._v(" "),a("h2",{attrs:{id:"about"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#about","aria-hidden":"true"}},[t._v("#")]),t._v(" about")]),t._v(" "),a("p",[t._v('"class fc::static_variant'),a("class",{attrs:{"fc::variant_object":""}},[t._v(" about()")])],1),t._v(" "),a("h2",{attrs:{id:"account-change-for-crosschain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#account-change-for-crosschain","aria-hidden":"true"}},[t._v("#")]),t._v(" account_change_for_crosschain")]),t._v(" "),a("p",[t._v("graphene::chain::full_transaction        account_change_for_crosschain(string, string, string, string, int64_t, bool)\\ngraphene::chain::full_transaction        add_whiteOperation(string, graphene::chain::address, flat_set<int32_t>, int64_t, bool)\\ngraphene::chain::full_transaction        approve_proposal(string, string, graphene::wallet::approval_delta, bool)\\ngraphene::chain::full_transaction        approve_referendum(string, string, graphene::wallet::approval_delta, bool)\\ngraphene::chain::full_transaction        bind_tunnel_account(string, string, string, bool)\\ngraphene::chain::full_transaction        bind_tunnel_account_with_script(string, string, string, string, bool)\\ngraphene::chain::full_transaction        cancel_cold_hot_uncreate_transaction(string, string, int64_t, bool)\\ngraphene::chain::full_transaction        cancel_coldhot_combined_transaction(string, string, int64_t, bool)\\ngraphene::chain::full_transaction        cancel_coldhot_eth_fail_transaction(string, string, int64_t, bool)\\ngraphene::chain::full_transaction        cancel_coldhot_uncombined_transaction(string, string, int64_t, bool)\\ngraphene::chain::full_transaction        cancel_eth_sign_transaction(string, string, int64_t, bool)\\ngraphene::chain::full_transaction        cancel_guarantee_order(graphene::chain::guarantee_object_id_type, bool)\\ngraphene::chain::full_transaction        cast_vote(string, graphene::chain::vote_object_id_type, int32_t, bool)\\ngraphene::chain::account_object          change_account_name(string, string)\\nchar                                     change_acquire_plugin_num(string, uint32_t)\\ngraphene::chain::full_transaction        citizen_referendum_for_senator(string, string, std::map"),a("a",{attrs:{href:"graphene::chain::account_id_type,graphene::chain::account_id_type"}},[t._v("graphene::chain::account_id_type,graphene::chain::account_id_type")]),t._v(", bool)\\ngraphene::chain::full_transaction        combine_transaction(std::vector"),a("string",[t._v(", bool)\\nclass fc::static_variant"),a("class",{attrs:{"fc::variant_object":""}},[t._v(" combinemultisigtransaction(class fc::static_variant"),a("class",{attrs:{"fc::variant_object":""}},[t._v(", flat_set"),a("string",[t._v(", string, bool)\\ngraphene::chain::full_transaction        confirm_name_transfer(string, string, bool)\\ngraphene::chain::full_transaction        correct_chain_data(string, std::vector"),a("a",{attrs:{href:"graphene::chain::address"}},[t._v("graphene::chain::address")]),t._v(", bool)\\ngraphene::chain::full_transaction        create_asset(string, string, uint8_t, graphene::chain::asset_options, optional"),a("a",{attrs:{href:"graphene::chain::bitasset_options"}},[t._v("graphene::chain::bitasset_options")]),t._v(", bool)\\ngraphene::chain::full_transaction        create_citizen(string, string, bool)\\ngraphene::chain::full_transaction        create_contract_transfer_fee_proposal(string, graphene::chain::share_type, int64_t, bool)\\ngraphene::wallet::crosschain_prkeys      create_crosschain_symbol(string)\\ngraphene::wallet::crosschain_prkeys      create_crosschain_symbol_cold(string, string, string)\\ngraphene::chain::full_transaction        create_guarantee_order(string, string, string, string, bool)\\ngraphene::chain::address                 create_multisignature_address(string, flat_set"),a("a",{attrs:{href:"graphene::chain::public_key_type"}},[t._v("graphene::chain::public_key_type")]),t._v(", int32_t, bool)\\ngraphene::chain::full_transaction        create_senator_member(string, bool)\\ngraphene::chain::full_transaction        create_vote(string, string, std::vector"),a("string",[t._v(", int64_t, bool)\\nclass fc::static_variant"),a("class",{attrs:{"fc::variant_object":""}},[t._v(" createrawtransaction(string, string, string, string)\\ngraphene::chain::signed_transaction      decode_multisig_transaction(string)\\nclass fc::static_variant"),a("class",{attrs:{"fc::variant_object":""}},[t._v(" decoderawtransaction(string, string)\\nstd::map<string,graphene::wallet::crosschain_prkeys> decrypt_coldkeys(string, string)\\nstd::map<string,graphene::wallet::crosschain_prkeys> dump_crosschain_private_key(string)\\nstd::map<string,graphene::wallet::crosschain_prkeys> dump_crosschain_private_keys()\\nstd::map"),a("a",{attrs:{href:"graphene::chain::address,string"}},[t._v("graphene::chain::address,string")]),t._v(" dump_private_key(string)\\nstd::map"),a("a",{attrs:{href:"graphene::chain::address,string"}},[t._v("graphene::chain::address,string")]),t._v(" dump_private_keys()\\ngraphene::chain::full_transaction        eth_cancel_fail_transaction(string, string, int64_t, bool)\\nfc::variant                              extra_imp(class fc::static_variant"),a("class",{attrs:{"fc::variant_object":""}},[t._v(")\\ngraphene::chain::full_transaction        foreclose_balance_from_citizen(string, string, string, string, bool)\\ngraphene::chain::full_transaction        foreclose_balance_from_citizens(string, std::map<string,std::vector"),a("a",{attrs:{href:"graphene::chain::asset"}},[t._v("graphene::chain::asset")]),t._v(">, bool)\\nclass fc::static_variant"),a("class",{attrs:{"fc::variant_object":""}},[t._v(" get_account(string)\\ngraphene::chain::address                 get_account_addr(string)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::asset"}},[t._v("graphene::chain::asset")]),t._v("      get_account_balances(string)\\noptional"),a("a",{attrs:{href:"graphene::chain::account_object"}},[t._v("graphene::chain::account_object")]),t._v(" get_account_by_addr(graphene::chain::address)\\nuint64_t                                 get_account_count()\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::crosschain_trx_object"}},[t._v("graphene::chain::crosschain_trx_object")]),t._v(" get_account_crosschain_transaction(string, string)\\nstd::vector"),a("a",{attrs:{href:"graphene::wallet::operation_detail"}},[t._v("graphene::wallet::operation_detail")]),t._v(" get_account_history(string, int32_t)\\ngraphene::chain::account_id_type         get_account_id(string)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::lockbalance_object"}},[t._v("graphene::chain::lockbalance_object")]),t._v(" get_account_lock_balance(string)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::acquired_crosschain_trx_object"}},[t._v("graphene::chain::acquired_crosschain_trx_object")]),t._v(" get_acquire_transaction(int32_t, string)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::asset"}},[t._v("graphene::chain::asset")]),t._v("      get_addr_balances(string)\\nstd::map<string,graphene::chain::asset>  get_address_pay_back_balance(graphene::chain::address, string)\\ngraphene::chain::asset_object            get_asset(string)\\nfc::variant                              get_asset_imp(string)\\nstd::vector<optional"),a("a",{attrs:{href:"graphene::chain::account_binding_object"}},[t._v("graphene::chain::account_binding_object")]),t._v("> get_binding_account(string, string)\\noptional"),a("a",{attrs:{href:"graphene::wallet::signed_block_with_info"}},[t._v("graphene::wallet::signed_block_with_info")]),t._v(" get_block(uint32_t)\\nstd::map<string,graphene::chain::share_type> get_bonus_balance(graphene::chain::address)\\ngraphene::chain::miner_object            get_citizen(string)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::lockbalance_object"}},[t._v("graphene::chain::lockbalance_object")]),t._v(" get_citizen_lock_balance(string)\\nstd::map<graphene::chain::account_id_type,std::vector"),a("a",{attrs:{href:"graphene::chain::asset"}},[t._v("graphene::chain::asset")]),t._v("> get_citizen_lockbalance_info(string)\\nstd::map<uint160_t,graphene::chain::signed_transaction> get_coldhot_transaction(int32_t)\\nstd::map<uint160_t,graphene::chain::signed_transaction> get_coldhot_transaction_by_blocknum(string, uint32_t, uint32_t, int32_t)\\nstring                                   get_coldhot_trx_sig(string, string, string, string)\\nstd::vector"),a("string",[t._v("                      get_contract_addresses_by_owner(string)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::asset"}},[t._v("graphene::chain::asset")]),t._v("      get_contract_balance(string)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::contract_event_notify_object"}},[t._v("graphene::chain::contract_event_notify_object")]),t._v(" get_contract_events(string)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::contract_event_notify_object"}},[t._v("graphene::chain::contract_event_notify_object")]),t._v(" get_contract_events_in_range(string, uint64_t, uint64_t)\\nstd::vector<uint160_t>                   get_contract_history(string, uint64_t, uint64_t)\\ngraphene::chain::ContractEntryPrintable  get_contract_info(string)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::contract_invoke_result_object"}},[t._v("graphene::chain::contract_invoke_result_object")]),t._v(" get_contract_invoke_object(string)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::contract_blocknum_pair"}},[t._v("graphene::chain::contract_blocknum_pair")]),t._v(" get_contract_registered(uint32_t)\\ngraphene::chain::contract_storage_view   get_contract_storage(graphene::chain::address, string)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::contract_blocknum_pair"}},[t._v("graphene::chain::contract_blocknum_pair")]),t._v(" get_contract_storage_changed(uint32_t)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::ContractEntryPrintable"}},[t._v("graphene::chain::ContractEntryPrintable")]),t._v(" get_contracts_by_owner(string)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::contract_hash_entry"}},[t._v("graphene::chain::contract_hash_entry")]),t._v(" get_contracts_hash_entry_by_owner(string)\\nstd::map<uint160_t,graphene::chain::signed_transaction> get_crosschain_transaction(int32_t)\\nstd::map<uint160_t,graphene::chain::signed_transaction> get_crosschain_transaction_by_block_num(string, uint32_t, uint32_t, int32_t)\\noptional"),a("a",{attrs:{href:"graphene::chain::multisig_account_pair_object"}},[t._v("graphene::chain::multisig_account_pair_object")]),t._v(" get_current_multi_address(string)\\noptional"),a("a",{attrs:{href:"graphene::chain::multisig_address_object"}},[t._v("graphene::chain::multisig_address_object")]),t._v(" get_current_multi_address_obj(string, graphene::chain::account_id_type)\\ngraphene::chain::dynamic_global_property_object get_dynamic_global_properties()\\nstd::vector<optional"),a("a",{attrs:{href:"graphene::chain::eth_multi_account_trx_object"}},[t._v("graphene::chain::eth_multi_account_trx_object")]),t._v("> get_eth_multi_account_trx(int32_t)\\ngraphene::chain::guard_member_object     get_eth_signer(string, string)\\nstring                                   get_first_contract_address()\\ngraphene::chain::global_property_object  get_global_properties()\\noptional"),a("a",{attrs:{href:"graphene::chain::guarantee_object"}},[t._v("graphene::chain::guarantee_object")]),t._v(" get_guarantee_order(graphene::chain::guarantee_object_id_type)\\nstd::vector<optional"),a("a",{attrs:{href:"graphene::chain::multisig_address_object"}},[t._v("graphene::chain::multisig_address_object")]),t._v("> get_multi_account_senator(string, string)\\nstd::vector<optional"),a("a",{attrs:{href:"graphene::chain::multisig_address_object"}},[t._v("graphene::chain::multisig_address_object")]),t._v("> get_multi_address_obj(string, graphene::chain::account_id_type)\\nstd::vector<optional"),a("a",{attrs:{href:"graphene::chain::multisig_account_pair_object"}},[t._v("graphene::chain::multisig_account_pair_object")]),t._v("> get_multisig_account_pair(string)\\noptional"),a("a",{attrs:{href:"graphene::chain::multisig_account_pair_object"}},[t._v("graphene::chain::multisig_account_pair_object")]),t._v(" get_multisig_account_pair_by_id(graphene::chain::multisig_account_pair_id_type)\\nclass fc::static_variant"),a("class",{attrs:{"fc::variant_object":""}},[t._v(" get_multisig_address(graphene::chain::address)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::multisig_asset_transfer_object"}},[t._v("graphene::chain::multisig_asset_transfer_object")]),t._v(" get_multisig_asset_tx()\\nstd::vector<optional"),a("a",{attrs:{href:"graphene::chain::guarantee_object"}},[t._v("graphene::chain::guarantee_object")]),t._v("> get_my_guarantee_order(string, bool)\\nstd::map<string,fc::ntp_info>            get_ntp_info()\\nfc::variant                              get_object(graphene::db::object_id_type)\\nstd::vector<uint160_t>                   get_pending_transactions()\\nstring                                   get_private_key(graphene::chain::public_key_type)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::proposal_object"}},[t._v("graphene::chain::proposal_object")]),t._v(" get_proposal_for_voter(string)\\ngraphene::chain::operation               get_prototype_operation(string)\\ngraphene::chain::public_key_type         get_pubkey_from_account(string)\\ngraphene::chain::public_key_type         get_pubkey_from_priv(string)\\ngraphene::chain::public_key_type         get_public_key(string)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::referendum_object"}},[t._v("graphene::chain::referendum_object")]),t._v(" get_referendum_for_voter(string)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::guard_lock_balance_object"}},[t._v("graphene::chain::guard_lock_balance_object")]),t._v(" get_senator_lock_balance(string)\\ngraphene::chain::guard_member_object     get_senator_member(string)\\ngraphene::chain::ContractEntryPrintable  get_simple_contract_info(string)\\nfc::variant                              get_transaction(uint160_t)\\nuint160_t                                get_transaction_id(graphene::chain::signed_transaction)\\nstd::vector"),a("a",{attrs:{href:"fc::variant"}},[t._v("fc::variant")]),t._v("                 get_votes(string)\\noptional"),a("a",{attrs:{href:"graphene::chain::whiteOperationList_object"}},[t._v("graphene::chain::whiteOperationList_object")]),t._v(" get_whiteOperation(string)\\nstd::map<uint160_t,graphene::chain::signed_transaction> get_withdraw_crosschain_without_sign_transaction()\\nstring                                   help()\\nbool                                     import_crosschain_key(string, string)\\nbool                                     import_key(string, string)\\nfc::variant                              info()\\ngraphene::chain::full_transaction        invoke_contract(string, string, string, string, string, string)\\nstring                                   invoke_contract_offline(string, string, string, string)\\nclass fc::static_variant<struct std::pair<struct graphene::chain::asset,struct fc::safe<__int64> > > invoke_contract_testing(string, string, string, string)\\nbool                                     is_locked()\\nbool                                     is_new()\\nbool                                     is_public_key_registered(string)\\nstring                                   lightwallet_broadcast(graphene::chain::signed_transaction)\\nstring                                   lightwallet_get_refblock_info()\\nflat_set"),a("a",{attrs:{href:"graphene::chain::miner_id_type"}},[t._v("graphene::chain::miner_id_type")]),t._v(" list_active_citizens()\\nstd::map<string,graphene::chain::guard_member_id_type> list_all_senators(string, uint32_t)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::asset_object"}},[t._v("graphene::chain::asset_object")]),t._v(" list_assets(string, uint32_t)\\nstd::map<string,graphene::chain::miner_id_type> list_citizens(string, uint32_t)\\nstd::vector<optional"),a("a",{attrs:{href:"graphene::chain::guarantee_object"}},[t._v("graphene::chain::guarantee_object")]),t._v("> list_guarantee_order(string, bool)\\nstd::vector"),a("a",{attrs:{href:"graphene::chain::account_object"}},[t._v("graphene::chain::account_object")]),t._v(" list_my_accounts()\\nstd::map<string,graphene::chain::guard_member_id_type> list_senator_members(string, uint32_t)\\nstd::vector<uint160_t>                   list_transactions(uint32_t, uint32_t)\\nbool                                     load_wallet_file(string)\\nchar                                     lock()\\ngraphene::chain::full_transaction        lock_balance_to_citizen(string, string, string, string, bool)\\ngraphene::chain::full_transaction        lock_balance_to_citizens(string, std::map<string,std::vector"),a("a",{attrs:{href:"graphene::chain::asset"}},[t._v("graphene::chain::asset")]),t._v(">, bool)\\nstring                                   name_transfer_to_address(string, string, graphene::chain::asset, string)\\nchar                                     network_add_nodes(std::vector"),a("string",[t._v(")\\nstd::vector"),a("a",{attrs:{href:"fc::variant"}},[t._v("fc::variant")]),t._v("                 network_get_connected_peers()\\nclass fc::static_variant"),a("class",{attrs:{"fc::variant_object":""}},[t._v(" network_get_info()\\nchar                                     ntp_update_time()\\ngraphene::chain::full_transaction        obtain_bonus_balance(string, std::map<string,graphene::chain::share_type>, bool)\\ngraphene::chain::full_transaction        obtain_pay_back_balance(string, std::map<string,graphene::chain::asset>, bool)\\ngraphene::chain::full_transaction        proposal_block_address(string, flat_set"),a("a",{attrs:{href:"graphene::chain::address"}},[t._v("graphene::chain::address")]),t._v(", int64_t, bool)\\ngraphene::chain::full_transaction        proposal_cancel_block_address(string, flat_set"),a("a",{attrs:{href:"graphene::chain::address"}},[t._v("graphene::chain::address")]),t._v(", int64_t, bool)\\ngraphene::chain::full_transaction        propose_fee_change(string, class fc::static_variant"),a("class",{attrs:{"fc::variant_object":""}},[t._v(", int64_t, bool)\\ngraphene::chain::full_transaction        propose_parameter_change(string, class fc::static_variant"),a("class",{attrs:{"fc::variant_object":""}},[t._v(", int64_t, bool)\\ngraphene::chain::full_transaction        propose_pay_back_asset_rate_change(string, class fc::static_variant"),a("class",{attrs:{"fc::variant_object":""}},[t._v(", int64_t, bool)\\ngraphene::chain::full_transaction        propose_senator_pledge_change(string, fc::time_point_sec, class fc::static_variant"),a("class",{attrs:{"fc::variant_object":""}},[t._v(", bool)\\ngraphene::chain::full_transaction        publish_asset_feed(string, string, graphene::chain::price_feed, bool)\\ngraphene::chain::full_transaction        publish_normal_asset_feed(string, string, graphene::chain::price_feed, bool)\\ngraphene::chain::full_transaction        referendum_accelerate_pledge(struct fc::get_typename<struct graphene::db::object_id<1,11,class graphene::chain::referendum_object> >, string, bool)\\ngraphene::chain::full_transaction        refund_combined_transaction(string, string, int64_t, bool)\\ngraphene::chain::full_transaction        refund_request(string, string, bool)\\ngraphene::chain::full_transaction        refund_uncombined_transaction(string, string, int64_t, bool)\\ngraphene::chain::full_transaction        register_account(string, bool)\\ngraphene::chain::full_transaction        register_contract(string, string, string, string)\\ngraphene::chain::full_transaction        register_contract_like(string, string, string, string)\\nclass fc::static_variant<struct std::pair<struct graphene::chain::asset,struct fc::safe<__int64> > > register_contract_testing(string, string)\\nstring                                   register_native_contract(string, string, string, string)\\nclass fc::static_variant<struct std::pair<struct graphene::chain::asset,struct fc::safe<__int64> > > register_native_contract_testing(string, string)\\nchar                                     remove_guarantee_id()\\nchar                                     remove_local_account(string)\\ngraphene::chain::full_transaction        remove_whiteOperation(string, graphene::chain::address, int64_t, bool)\\nchar                                     save_wallet_file(string)\\ngraphene::chain::full_transaction        senator_appointed_crosschain_fee(string, graphene::chain::share_type, string, int64_t, bool)\\ngraphene::chain::full_transaction        senator_appointed_lockbalance_senator(string, std::map<string,graphene::chain::asset>, int64_t, bool)\\ngraphene::chain::full_transaction        senator_appointed_publisher(string, graphene::chain::account_id_type, string, int64_t, bool)\\ngraphene::chain::full_transaction        senator_cancel_publisher(string, graphene::chain::account_id_type, string, int64_t, bool)\\ngraphene::chain::full_transaction        senator_change_acquire_trx(string, string, int64_t, bool)\\ngraphene::chain::full_transaction        senator_change_eth_gas_price(string, string, string, int64_t, bool)\\nchar                                     senator_changer_eth_coldhot_singer_trx(string, string, string, int64_t, string, string, bool)\\nchar                                     senator_changer_eth_singer_trx(string, string, string, int64_t, bool)\\ngraphene::chain::full_transaction        senator_determine_block_payment(string, std::map<uint32_t,uint32_t>, int64_t, bool)\\ngraphene::chain::full_transaction        senator_determine_withdraw_deposit(string, bool, string, int64_t, bool)\\ngraphene::chain::full_transaction        senator_foreclose_balance(string, string, string, bool)\\ngraphene::chain::full_transaction        senator_lock_balance(string, string, string, bool)\\ngraphene::chain::full_transaction        senator_pass_coldhot_combined_transaction(string, string, int64_t, bool)\\ngraphene::chain::full_transaction        senator_pass_combined_transaction(string, string, int64_t, bool)\\nchar                                     senator_sign_coldhot_transaction(string, string, string, string)\\nchar                                     senator_sign_crosschain_transaction(string, string)\\nchar                                     senator_sign_eths_coldhot_final_trx(string, string, string, string)\\nchar                                     senator_sign_eths_final_trx(string, string)\\nchar                                     senator_sign_eths_multi_account_create_trx(string, string, string, string)\\nchar                                     send_coldhot_transfer_with_sign(string, string, string)\\nstring                                   serialize_transaction(graphene::chain::signed_transaction)\\ngraphene::chain::full_transaction        set_balance_for_addr(string, graphene::chain::address, graphene::chain::asset, bool)\\ngraphene::chain::full_transaction        set_citizen_pledge_pay_back_rate(string, int32_t, bool)\\ngraphene::chain::full_transaction        set_desired_citizen_and_senator_member_count(string, uint16_t, uint16_t, bool)\\nchar                                     set_gas_limit_in_block(graphene::chain::share_type)\\nchar                                     set_guarantee_id(graphene::chain::guarantee_object_id_type)\\nchar                                     set_password(string)\\ngraphene::chain::full_transaction        sign_multi_asset_trx(string, graphene::chain::multisig_asset_transfer_id_type, string, bool)\\nstring                                   sign_multisig_trx(graphene::chain::address, string)\\ngraphene::chain::signed_transaction      sign_transaction(graphene::chain::signed_transaction, bool)\\nstring                                   signrawmultransaction(string, string, string, class fc::static_variant"),a("class",{attrs:{"fc::variant_object":""}},[t._v(")\\nstring                                   signrawtransaction(string, string, class fc::static_variant"),a("class",{attrs:{"fc::variant_object":""}},[t._v(", bool)\\nchar                                     start_citizen(bool)\\nchar                                     start_mining(std::vector"),a("string",[t._v(")\\ngraphene::chain::full_transaction        transfer_from_cold_to_hot(string, string, string, string, string, string, int64_t, bool)\\nstring                                   transfer_from_to_address(string, string, string, string, string)\\ngraphene::chain::full_transaction        transfer_senator_multi_account(string, string, string, string, string, bool)\\ngraphene::chain::full_transaction        transfer_to_account(string, string, string, string, string, bool)\\ngraphene::chain::full_transaction        transfer_to_address(string, string, string, string, string, bool)\\ngraphene::chain::full_transaction        transfer_to_contract(string, string, string, string, string, string, string, bool)\\nclass fc::static_variant<struct std::pair<struct graphene::chain::asset,struct fc::safe<__int64> > > transfer_to_contract_testing(string, string, string, string, string)\\ngraphene::chain::full_transaction        unbind_tunnel_account(string, string, string, bool)\\ngraphene::chain::full_transaction        unbind_tunnel_account_with_script(string, string, string, string, bool)\\nchar                                     unlock(string)\\ngraphene::chain::full_transaction        update_asset(string, string, string, bool)\\ngraphene::chain::full_transaction        update_asset_feed_producers(string, flat_set"),a("string",[t._v(", bool)\\ngraphene::chain::full_transaction        update_asset_private_keys(string, string, string, string, bool)\\ngraphene::chain::full_transaction        update_asset_private_keys_with_brain_key(string, string, string, string, bool)\\ngraphene::chain::full_transaction        update_asset_private_with_coldkeys(string, string, string, string, bool)\\ngraphene::chain::full_transaction        update_asset_private_with_keys(string, string, string, string, string, string, bool)\\ngraphene::chain::full_transaction        update_bitasset(string, graphene::chain::bitasset_options, bool)\\ngraphene::chain::full_transaction        update_senator_formal(string, std::map"),a("a",{attrs:{href:"graphene::chain::account_id_type,graphene::chain::account_id_type"}},[t._v("graphene::chain::account_id_type,graphene::chain::account_id_type")]),t._v(', int64_t, bool)\\ngraphene::chain::full_transaction        upgrade_account(string, bool)\\ngraphene::chain::full_transaction        upgrade_contract(string, string, string, string, string, string)\\nclass fc::static_variant<struct std::pair<struct graphene::chain::asset,struct fc::safe<__int64> > > upgrade_contract_testing(string, string, string, string)\\ngraphene::chain::address                 wallet_create_account(string)\\ngraphene::chain::address                 wallet_create_account_with_brain_key(string)\\ngraphene::chain::full_transaction        wallet_create_asset(string, string, uint8_t, graphene::chain::share_type, graphene::chain::share_type, bool)\\ngraphene::wallet::crosschain_prkeys      wallet_create_crosschain_symbol(string)\\ngraphene::wallet::crosschain_prkeys      wallet_create_crosschain_symbol_with_brain_key(string)\\ngraphene::chain::full_transaction        wallet_create_erc_asset(string, string, uint8_t, graphene::chain::share_type, graphene::chain::share_type, string, bool)\\ngraphene::chain::full_transaction        withdraw_cross_chain_transaction(string, string, string, string, string, bool)\\nchar                                     witness_node_stop()\\n"')])],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)],1)])},[],!1,null,null,null);n.default=e.exports}}]);