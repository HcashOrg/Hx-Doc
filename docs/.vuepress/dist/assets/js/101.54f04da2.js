(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{198:function(n,t,r){"use strict";r.r(t);var a=r(0),e=Object(a.a)({},function(){var n=this,t=n.$createElement,r=n._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[r("h1",{attrs:{id:"java和kotlin写合约的例子"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java和kotlin写合约的例子","aria-hidden":"true"}},[n._v("#")]),n._v(" Java和Kotlin写合约的例子")]),n._v(" "),r("h1",{attrs:{id:"使用java编写合约的例子"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用java编写合约的例子","aria-hidden":"true"}},[n._v("#")]),n._v(" 使用Java编写合约的例子")]),n._v(" "),r("pre",[r("code",[n._v('// file Utils.java\n\nimport gjavac.lib.Component;\n\nimport static gjavac.lib.UvmCoreLibs.print;\n\n@Component\npublic class Utils {\n    public int sum(int a, int b) {\n        print("this is util sum func");\n        return a + b;\n    }\n}\n\n// file Storage.java\n\npublic class Storage {\n    public String name; // both field and property supported\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\n// file DemoContract1.java\n\nimport gjavac.lib.Contract;\nimport gjavac.lib.Offline;\nimport gjavac.lib.UvmContract;\n\nimport static gjavac.lib.UvmCoreLibs.*;\n\n@Contract(storage = Storage.class)\nclass DemoContract extends UvmContract<Storage> {\n\n    @Override\n    public void init() {\n        print("init of demo java Contract");\n        this.getStorage().name = "my_contract";\n        print("storage.name changed to " + this.getStorage().getName());\n        pprint(this.getStorage());\n    }\n\n    public String sayHi(String name) {\n        print("say hi api called of contract to " + name);\n        return "Hello" + name;\n    }\n\n    public void setName(String name) {\n        this.getStorage().setName(name);\n        pprint("name changed to " + name);\n    }\n\n    public String getName(String arg) {\n        print("storage.name=" + this.getStorage().getName());\n        String name = this.getStorage().getName();\n        return name;\n    }\n\n    @Offline\n    public String offlineGetInfo(String arg) {\n        print("offlineGetInfo called with arg " + arg);\n        Utils utils = new Utils();\n        print("3+4=" + utils.sum(3, 4));\n        return "hello, offline api";\n    }\n\n}\n\n// file DemoContractEntrypoint.java\n\nimport gjavac.lib.UvmContract;\n\nimport static gjavac.lib.UvmCoreLibs.print;\n\npublic class DemoContractEntrypoint {\n    public UvmContract main() {\n        print("hello java");\n        DemoContract contract = new DemoContract();\n        contract.setStorage(new Storage());\n        print(contract);\n        contract.init();\n        return contract;\n    }\n}\n')])]),n._v(" "),r("h1",{attrs:{id:"使用kotlin写智能合约的例子"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用kotlin写智能合约的例子","aria-hidden":"true"}},[n._v("#")]),n._v(" 使用Kotlin写智能合约的例子")]),n._v(" "),r("pre",[r("code",[n._v('import gjavac.lib.*\n\nclass Storage {\n    var name: String? = null\n//    var age: Int? = null\n}\n\n@Component\nclass Utils {\n    fun sum(a: Int, b: Int): Int {\n        UvmCoreLibs.print("this is util sum func")\n        return a + b\n    }\n}\n\n@Contract(storage = Storage::class)\nclass MyContract : UvmContract<Storage>() {\n    override fun init() {\n        val a: Byte = 123\n        UvmCoreLibs.print("init of demo Contract " + a)\n        this.storage?.name = "my_contract" // TODO: getfield error in chain\n        UvmCoreLibs.print("storage.name changed")\n        UvmCoreLibs.pprint(this.storage)\n        UvmCoreLibs.print(this.storage?.name)\n//        this.storage?.age = 25 // FIXME: maybe crash\n    }\n\n    fun sayHi(name: String): String {\n        UvmCoreLibs.print("say hi api called of contract to $name")\n        return "Hello" + name\n    }\n\n    fun setName(name: String) {\n        this.storage?.name = name\n        UvmCoreLibs.pprint("name changed to " + name)\n    }\n\n    fun getName(arg: String) {\n        UvmCoreLibs.print("storage.name=" + this.storage?.name)\n    }\n\n    @Offline\n    fun offlineGetInfo(arg: String): String {\n        UvmCoreLibs.print("offlineGetInfo called with arg " + arg)\n//        testUtil() // FIXME: change to get this["testUtil"]()\n        val utils = Utils()\n        UvmCoreLibs.print("3+4=" + utils.sum(3, 4))\n        return "hello, offline api"\n    }\n\n    private fun testUtil() {\n        UvmCoreLibs.print("this is util func not in apis")\n    }\n}\n\nclass Person {\n\n    // TODO: event, LCMP, LREM etc.\n\n    fun sayHi(name: String): String {\n        UvmCoreLibs.print("sayHi func called")\n        return "Hello$name java. I love money"\n    }\n\n    companion object {\n//\n//        fun sum(a: String, b: String): String {\n//            return a + b\n//        }\n    }\n\n    fun testIf(): Boolean {\n        val a = 1\n        val b = 2\n        val c = 3\n        if(a<b) {\n            UvmCoreLibs.print("$a < $b")\n        }\n        if(c>=b) {\n            UvmCoreLibs.print("$c>=$b")\n        }\n        if(b>c) {\n            UvmCoreLibs.print("error here")\n        } else {\n            UvmCoreLibs.print("$b <= $c")\n        }\n        return true\n    }\n\n    fun testFor() {\n        UvmCoreLibs.print("testFor cases")\n        var sum = 0\n        // TODO\n    }\n\n    fun testWhile() {\n        UvmCoreLibs.print("testWhile cases")\n        var sum = 0\n        var i = 0\n        while(i<10) {\n            sum += i\n            i++\n            println(i)\n        }\n        UvmCoreLibs.print("sum=$sum")\n        var j = 100\n        var sum2 = 0\n        do {\n            sum2 += j\n            j--\n        }while(j>=0)\n        println("sum2=$sum2")\n    }\n\n//     fun testWhen() {\n//         println("testWhen cases")\n//         var i = 0\n//         while(i<4) {\n//             println(i)\n//             when(i) {\n//                 0 -> println("$i=0")\n//                 1->println("$i=1")\n//                 2->println("$i=2")\n//                 else -> println("$i>2")\n//             }\n//             i++\n//         }\n//     }\n\n    // TODO: test continue, break\n\n    fun test_pprint() {\n        UvmCoreLibs.pprint(this)\n    }\n\n    fun testNumber() {\n        UvmCoreLibs.print("testNumber cases:")\n        val a = 4\n        val b = 5\n        val c = 1.23\n        val d = a + b\n        val e = a + c\n        val f = b*c\n        val h = c/b\n        UvmCoreLibs.print(c)\n        println("$a + $b = $d")\n        println("$a + $c = $e")\n        println("$b * $c = $f")\n        println("$c / $b = $h")\n\n        println("1 = ${UvmCoreLibs.tointeger(c)}")\n        println("~ ${a} = ${UvmCoreLibs.neg(a as Long)}")\n    }\n\n    fun testBooleans() {\n        var a = true\n        var b = false\n        var c = a && b\n        UvmCoreLibs.print("a && b=$c")\n        println("a || b=${a||b}")\n        if(a) {\n            UvmCoreLibs.print("$a=true")\n        }\n        if(b) {\n            UvmCoreLibs.print("error happend in boolean test")\n        } else {\n            UvmCoreLibs.print("$b=false")\n        }\n        var i=0\n        while(i<3) {\n            if(!(i>1)) {\n                UvmCoreLibs.print("!($i>1)=true")\n            }\n            i++\n        }\n        UvmCoreLibs.print("!c=${!c}")\n    }\n\n    fun testArray() {\n        UvmCoreLibs.print("testArray cases")\n        val array1 = UvmArray.create<Int?>()\n        array1.add(1)\n        array1.add(2)\n        array1.add(3)\n        array1.add(4)\n        UvmCoreLibs.pprint(array1)\n        UvmCoreLibs.print("array 1 size is " + array1.size()) // 4\n        array1.set(4, 2)\n        UvmCoreLibs.print("array[4] is " + array1.get(4)) // 2\n        array1.pop()\n        UvmCoreLibs.print("array 1 after changed size is " + array1.size()) // 3\n        UvmCoreLibs.print("array[3] is " + array1.get(3)) // 3\n        UvmCoreLibs.pprint(array1)\n        for (i in 1..(array1.size())) {\n            val item = array1.get(i)\n            UvmCoreLibs.print("index: " + i)\n            UvmCoreLibs.print("value: " + item)\n        }\n        val array1Iter = array1.ipairs()\n        var array1keyValuePair = array1Iter(array1, 0)\n        while (array1keyValuePair.first != null)\n        {\n            UvmCoreLibs.print("key: " + array1keyValuePair.first)\n            UvmCoreLibs.print("value: " + array1keyValuePair.second)\n            array1keyValuePair = array1Iter(array1, array1keyValuePair.first)\n        }\n        array1.set(3, null)\n        UvmCoreLibs.print("array1 size is ${array1.size()} after remove index 3")\n        UvmCoreLibs.pprint(array1)\n    }\n\n    fun testMap() {\n        val map1 = UvmMap.create<String>()\n        map1.set("name", "C#")\n        map1.set("country", "China")\n        UvmCoreLibs.print("map1\'s name is " + map1.get("name"))\n        UvmCoreLibs.print("map1\'s country is " + map1.get("country"))\n        // 遍历map的demo\n        val map1PairsIter = map1.pairs()\n        UvmCoreLibs.pprint(map1PairsIter)\n        var keyValuePair = map1PairsIter(map1, null)\n        UvmCoreLibs.pprint(keyValuePair)\n        UvmCoreLibs.print(keyValuePair.first)\n        UvmCoreLibs.print(keyValuePair.second)\n        while (keyValuePair.first != null)\n        {\n            UvmCoreLibs.print("key: " + UvmCoreLibs.tostring(keyValuePair.first))\n            UvmCoreLibs.print("value: " + UvmCoreLibs.tostring(keyValuePair.second))\n//            debug()\n            if (keyValuePair.first == "name")\n            {\n                UvmCoreLibs.print("found key==name pair")\n            }\n            keyValuePair = map1PairsIter(map1, keyValuePair.first)\n        }\n        val table1 = map1 as UvmTable\n        UvmCoreLibs.pprint("cast C#=" + (table1 as UvmMap<String>).get("name"))\n    }\n\n    fun testEvent() {\n        UvmCoreLibs.emit("Hello", "World") // FIXME: change to emitEventMethod\n    }\n\n    fun testModules() {\n        UvmCoreLibs.print("testModules cases")\n        val strModule = UvmCoreLibs.importModule(UvmStringModule::class.java, "string")\n        val len = strModule.len("Hello")\n        UvmCoreLibs.print("Hello length is $len")\n\n        var tableModule = UvmCoreLibs.importModule<UvmTableModule>(UvmTableModule::class.java, "table")\n        var table1 = UvmArray.create<String>()\n        table1.add("a")\n        tableModule.append(table1, "b")\n        var table1Count = tableModule.length(table1)\n        UvmCoreLibs.print("table1 size is: " + table1Count)\n\n        val mathModule = UvmCoreLibs.importModule<UvmMathModule>(UvmMathModule::class.java, "math")\n        val floor1 = mathModule.floor(3.3)\n        UvmCoreLibs.print("floor(3.3) = " + floor1)\n        val abs1 = mathModule.abs(-4)\n        UvmCoreLibs.print("abs(-4) = " + abs1)\n        val pi = mathModule.pi\n        UvmCoreLibs.print("pi = " + pi)\n        val stoi1 = mathModule.tointeger("123")\n        UvmCoreLibs.print("123=$stoi1")\n\n        var timeModule = UvmCoreLibs.importModule<UvmTimeModule>(UvmTimeModule::class.java, "time");\n        UvmCoreLibs.print("date: " + timeModule.tostr(1494301754))\n\n        val jsonModule = UvmCoreLibs.importModule<UvmJsonModule>(UvmJsonModule::class.java, "json");\n        UvmCoreLibs.print("dumps of json module is: " + jsonModule.dumps(jsonModule))\n    }\n\n    fun testImportContract() {\n        // TODO\n        val utilsContract = UvmCoreLibs.importContract(Utils::class.java, "utils")\n        UvmCoreLibs.print("3+4=${utilsContract.sum(3, 4)}")\n    }\n\n    fun main(): MyContract {\n        // entry point of contract\n        UvmCoreLibs.print("hello uvm")\n        val contract = MyContract()\n        // don\'t init contract when compile to gpc, used as contract\n//        if (contract is MyContract) {\n//            print("contract is contract")\n//            print(contract.sayHi("contract-name"))\n//            contract.storage = Storage()\n//            contract.init()\n//            print("name="+contract.storage?.name)\n//            val offlineApiRes = contract.offlineGetInfo("hi")\n//            print("offline api res is $offlineApiRes")\n//        }\n\n        testIf()\n        testNumber()\n        testWhile()\n//        testWhen()\n        test_pprint()\n        testBooleans()\n        testArray()\n        testMap()\n        testEvent()\n        testModules()\n//        testImportContract()\n        UvmCoreLibs.print(sayHi("hi-name"))\n        return contract\n    }\n}')])])])},[],!1,null,null,null);t.default=e.exports}}]);