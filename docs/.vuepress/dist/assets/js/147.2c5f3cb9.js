(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{311:function(t,e,n){"use strict";n.r(e);var r=n(0),p=Object(r.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"内置库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内置库","aria-hidden":"true"}},[t._v("#")]),t._v(" 内置库")]),t._v(" "),n("p",[t._v("require 加载某个模块，比如local math = require 'math'")]),t._v(" "),n("p",[t._v("内置模块有string, table, math, time, json, safemath，使用时不需要require")]),t._v(" "),n("p",[t._v("另外，非合约模式下还可以使用更多内置模块os, net, io, http, jsonrpc等")]),t._v(" "),n("p",[n("a",{attrs:{href:"/language-syntax/auto-import-libs"}},[t._v("默认引入库")])]),t._v(" "),n("h1",{attrs:{id:"os模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#os模块","aria-hidden":"true"}},[t._v("#")]),t._v(" os模块")]),t._v(" "),n("p",[t._v("os.clock()   返回执行该程序CPU花去的时钟秒数")]),t._v(" "),n("p",[t._v("os.date(format, time)  参数时间戳可选，如果没有给出时间用当前时间，返回格式化的字符串或table类型的时间信息")]),t._v(" "),n("p",[t._v("os.difftime(t2, t1)    返回时间戳t2-t1的差值")]),t._v(" "),n("p",[t._v("os.execute(command)    执行系统命令command")]),t._v(" "),n("p",[t._v("os.exit(code, close)    退出进程，code是错误码，close表示是否退出当前虚拟堆栈")]),t._v(" "),n("p",[t._v("os.getenv(varname)      获取环境变量")]),t._v(" "),n("p",[t._v("os.remove(filename)     删除文件或空文件夹")]),t._v(" "),n("p",[t._v("os.rename(oldname, newname)     重命名文件")]),t._v(" "),n("p",[t._v("os.setlocale(locale, category)   设置当前程序的时区，category可选默认值all，表示locale作用的范围")]),t._v(" "),n("p",[t._v("os.time(table)      table表示时间信息的table，默认是当前时间的信息，返回时间戳")]),t._v(" "),n("p",[t._v("os.tmpname()        返回一个临时文件名称")]),t._v(" "),n("h1",{attrs:{id:"io模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#io模块","aria-hidden":"true"}},[t._v("#")]),t._v(" io模块")]),t._v(" "),n("p",[t._v("io.close(file)     关闭文件")]),t._v(" "),n("p",[t._v("io.flush()         flush输出缓冲区")]),t._v(" "),n("p",[t._v("io.input(file)     读取模式打开文件")]),t._v(" "),n("p",[t._v("io.lines(filename)    读取模式打卡文件并返回遍历文件内容中各行的迭代器")]),t._v(" "),n("p",[t._v("io.open(filename, mode)    按指定模式打开文件，mode可选值为读取模式'r', 写入模式'w', 添加模式'a', 保留旧内容更新模式'r+', 抛弃旧内容更新模式'w+', 保留旧内容并且只能文件尾添加的更新模式'a+'，默认是'r'")]),t._v(" "),n("p",[t._v("io.read(read_mode)      读取当前打开输入文件的内容并返回，参数read_mode可以有多个可选值，不同值的作用如下：")]),t._v(" "),n("pre",[n("code",[t._v('"*all"    读取整个文件\n"*line"    读取下一行\n"*number"    读取一个数字\n<num>    读取一个不超过<num>个字符的字符串\n')])]),t._v(" "),n("p",[t._v("io.seek(pos ?: int) 设置或获取当前打开文件的读写位置,如果提供pos参数，就是修改当前打开文件的读写位置，如果不提供pos参数，则是返回当前打开文件的读写位置")]),t._v(" "),n("p",[t._v("io.write(content: string)  把content的内容写入当前打开的文件")]),t._v(" "),n("p",[t._v("例如:")]),t._v(" "),n("pre",[n("code",[t._v('let io = require \'io\';\nlet lines = io.lines("test/in.txt")     -- 读取文件内容，每行文本内容放入lines(table类型)\nlet text = table.concat(lines, \',\')    \nio.open("test/out.txt", "w")            -- 写入模式打开文件（然后当前的打开文件是test/out.txt)\nio.write(text)                          -- 把text内容写入当前打开的文件（也就是test/out.txt)\nlet cur_pos = io.seek()                 -- 当前打开文件的读写位置是cur_pos\nio.close()                              -- 关闭当前打开的文件\n')])]),t._v(" "),n("h1",{attrs:{id:"net模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#net模块","aria-hidden":"true"}},[t._v("#")]),t._v(" net模块")]),t._v(" "),n("p",[t._v("net.listen(address, port)   TCP监听address地址的port端口，监听所有地址的port端口用'0.0.0.0', 返回TcpServer对象")]),t._v(" "),n("p",[t._v("net.connect(address, port)  发起TCP连接")]),t._v(" "),n("p",[t._v("net.accept(server: TcpServer)          tcp监听端阻塞等待TCP客户端连接，返回TcpSocket")]),t._v(" "),n("p",[t._v("net.accept_async(server: TcpServer, handler: Function)    tcp异步监听TCP客户端连接，当出现新连接时，使用连接socket触发handler函数")]),t._v(" "),n("p",[t._v("net.start_io_loop(server: TcpServer)       启动TCP异步服务端事件循环，如果使用accept_async异步TCP服务，需要之后调用这个函数")]),t._v(" "),n("p",[t._v("net.read(socket, count)     从socket中读取count个字节")]),t._v(" "),n("p",[t._v("net.read_until(socket, end: string) 从socket读取字节流直到遇到end，返回结果包含end")]),t._v(" "),n("p",[t._v("net.write(socket, data)     把字节流或字符串写入socket")]),t._v(" "),n("p",[t._v("net.close_socket(socket)    关闭socket连接")]),t._v(" "),n("p",[t._v("net.close_server(server)    关闭TcpServer")]),t._v(" "),n("p",[t._v("net.shutdown()              关闭整个IO事件循环")]),t._v(" "),n("p",[t._v("例如:")]),t._v(" "),n("pre",[n("code",[t._v('let server = net.listen("127.0.0.1", 3000)\nwhile true do\n    let ctx = net.accept(server)\n    let data = net.read(ctx, 10)\n    pprint(data)\nend\n')])]),t._v(" "),n("h1",{attrs:{id:"http模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http模块","aria-hidden":"true"}},[t._v("#")]),t._v(" http模块")]),t._v(" "),n("p",[t._v("http.listen(address: string, port: int)   监听address地址的PORT端口的HTTP请求")]),t._v(" "),n("p",[t._v("http.connect(address: string, port: int)  连接到HTTP服务器端（一般不需要直接用）")]),t._v(" "),n("p",[t._v("http.request(method: string, url: string, body: string, headers: table)  发送http请求，返回http回复")]),t._v(" "),n("p",[t._v("http.close(ctx)          关闭http请求上下文")]),t._v(" "),n("p",[t._v("http.accept(server: HttpServer)          等待http请求，返回http请求上下文ctx")]),t._v(" "),n("p",[t._v("http.accept_async(server: HttpServer, handler: Function)  异步监听http请求，当接收到新http请求时，使用HttpContext对象作为参数调用handler函数")]),t._v(" "),n("p",[t._v("http.start_io_loop(server: HttpServer)  启动http异步服务端事件循环，如果使用accept_async异步TCP服务，需要之后调用这个函数")]),t._v(" "),n("p",[t._v("http.get_req_header(ctx, key: string)    获取http请求中的头信息中key的值")]),t._v(" "),n("p",[t._v("http.get_res_header(ctx, key: string)    获取Http回复中头信息中key的值")]),t._v(" "),n("p",[t._v("http.get_req_http_method(ctx)            获取http请求中的HTTP方法（字符串）")]),t._v(" "),n("p",[t._v("http.get_req_path(ctx)               获取http请求中的path部分")]),t._v(" "),n("p",[t._v("http.get_req_http_protocol           获取http请求的HTTP协议（字符串）")]),t._v(" "),n("p",[t._v("http.get_req_body(ctx)       获取http请求中的body内容")]),t._v(" "),n("p",[t._v("http.set_res_header(ctx, key: string, value: string)     设置http回复中的头信息")]),t._v(" "),n("p",[t._v("http.write_res_body(ctx, data: string)           向http回复中追加写入数据")]),t._v(" "),n("p",[t._v("http.set_status(ctx, status_code: int, status_message: string)   设置http回复中的状态码和信息")]),t._v(" "),n("p",[t._v("http.get_status(ctx)             获取http回复的状态码")]),t._v(" "),n("p",[t._v("http.get_status_message(ctx)     获取http回复中的状态信息（字符串）")]),t._v(" "),n("p",[t._v("http.get_res_body(ctx)           获取http回复中的body内容")]),t._v(" "),n("p",[t._v("http.finish_res(ctx)            把http回复内容传给客户端，必须调用这个函数才会实际回复")]),t._v(" "),n("p",[t._v("下面给出一个最简单的阻塞式HTTP模块的使用例子（注意这只是阻塞式API的代码例子，不建议直接使用）:")]),t._v(" "),n("pre",[n("code",[t._v('let http = require \'http\'\nlet net = require \'net\'\n\nlet res = http.request(\'GET\', "http://www.gov.cn/", \'\', {\n    Accept="text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",\n    ["User-Agent"]="Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"\n})\npprint(http.get_res_header(res, "Content-Length"))\npprint(http.get_res_body(res))\nhttp.close(res)\n\nlet server = http.listen("0.0.0.0", 3000)\n\npprint("listening on 0.0.0.0:3000\\n")\n\n-- async api\n\nlet function handler(ctx)\n    let net = require \'net\'\n    pprint("got new connection", ctx)\n    -- pprint(\'get req body\', http.get_req_body(ctx), \'\\n\')\n    net.write(ctx, "HTTP/1.1 200 OK\\r\\nContent-Type:text/html; utf-8\\r\\nContent-Length:5\\r\\n\\r\\nhello")\n    net.close_socket(ctx)\nend\n\nnet.accept_async(server, handler)\nnet.start_io_loop(server)\n\npprint("starting sync http server")\n\nwhile true do\n    let ctx = http.accept(server)\n    pprint(\'get req body\', http.get_req_body(ctx), \'\\n\')\n    http.write_res_body(ctx, "hello world")\n    http.set_status(ctx, 200, \'OK\')\n    http.set_res_header(ctx, "Content-Type", "text/html; utf-8")\n    http.finish_res(ctx)\n    http.close(ctx)\nend\n')])]),t._v(" "),n("p",[n("a",{attrs:{href:"/language-syntax/global-variables"}},[t._v("全局变量表")])]),t._v(" "),n("h1",{attrs:{id:"一些合约相关的api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一些合约相关的api","aria-hidden":"true"}},[t._v("#")]),t._v(" 一些合约相关的API")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"/language-syntax/contract-api-reference"}},[t._v("contract api reference")])])])])},[],!1,null,null,null);e.default=p.exports}}]);