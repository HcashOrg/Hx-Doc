(window.webpackJsonp=window.webpackJsonp||[]).push([[149],{299:function(e,n,t){"use strict";t.r(n);var a=t(0),l=Object(a.a)({},function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"语法规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#语法规则","aria-hidden":"true"}},[this._v("#")]),this._v(" 语法规则")]),this._v(" "),n("pre",[n("code",[this._v("chunk = block\n\nblock = {stat} [retstat]\n\ntype = Name |\n        '(' {type} [‘,’ type] ‘)’  ‘=>’ type\n\nrecord = ‘type’ Name {‘<’ { Name [‘,’ Name ] } ‘>’} ‘=’ \n                    ‘{‘ {  Name ‘:’ type [  ‘,’  Name ‘:’ type  ]  } ‘}’\n\ntypedef =  ‘type’ Name {‘<’ { Name [‘,’ Name ] } ‘>’} ‘=’  Name {‘<’ { Name [‘,’ Name ] } ‘>’}\n\nstat =  ‘;’ | \n     varlist ‘=’ explist | \n     functioncall | \n     label | \n     break | \n     goto Name | \n     record |\n     typedef |\n     do block end | \n     while exp do block end | \n     repeat block until exp | \n     if exp then block {elseif exp then block} [else block] end | \n     for Name ‘=’ exp ‘,’ exp [‘,’ exp] do block end | \n     for namelist in explist do block end | \n     function funcname funcbody | \n     local function Name funcbody | \n     local namelist [‘=’ explist] \n\nretstat = return [explist] [‘;’]\n\nlabel = ‘’ Name ‘’\n\nfuncname = Name {‘.’ Name} [‘:’ Name]\n\nvarlist = var {‘,’ var}\n\nvar =  Name | prefixexp ‘[’ exp ‘]’ | prefixexp ‘.’ Name \n\nname = Name {‘:’ type } || Name\n\nnamelist = name {‘,’ name}\n\nexplist = exp {‘,’ exp}\n\nexp =  nil | false | true | Numeral | LiteralString | ‘...’ | functiondef | \n     prefixexp | tableconstructor | exp binop exp | unop exp \n\nprefixexp = var | functioncall | ‘(’ exp ‘)’\n\nfunctioncall =  prefixexp args | prefixexp ‘:’ Name args \n\nargs =  ‘(’ [explist] ‘)’ | tableconstructor | LiteralString      \n\nfunctiondef = function funcbody\n\nfuncbody = ‘(’ [parlist] ‘)’ block end\n\nparlist = namelist [‘,’ ‘...’] | ‘...’\n\ntableconstructor = ‘{’ [fieldlist] ‘}’\n\nfieldlist = field {fieldsep field} [fieldsep]\n\nfield = ‘[’ exp ‘]’ ‘=’ exp | Name ‘=’ exp | exp\n\nfieldsep = ‘,’ | ‘;’\n\nbinop =  ‘+’ | ‘-’ | ‘*’ | ‘/’ | ‘//’ | ‘^’ | ‘%’ | \n     ‘&’ | ‘~’ | ‘|’ | ‘>>’ | ‘<<’ | ‘..’ | \n     ‘<’ | ‘<=’ | ‘>’ | ‘>=’ | ‘==’ | ‘~=’ | \n     and | or\n\nunop = ‘-’ | not | ‘#’ | ‘~’\n")])])])},[],!1,null,null,null);n.default=l.exports}}]);