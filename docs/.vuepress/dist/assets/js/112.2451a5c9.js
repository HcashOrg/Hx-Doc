(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{369:function(e,a,t){"use strict";t.r(a);var n=t(0),r=Object(n.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"uvm-assembly-lanugage-reference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#uvm-assembly-lanugage-reference","aria-hidden":"true"}},[e._v("#")]),e._v(" uvm assembly lanugage reference")]),e._v(" "),t("p",[e._v("uvm assembly language是uvm的伪汇编语言，可以用来生成uvm字节码，较uvm字节码更可读和维护。uvm上部分编程语言是先编译生成uvm assembly然后再生成uvm字节码的")]),e._v(" "),t("h1",{attrs:{id:"features"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#features","aria-hidden":"true"}},[e._v("#")]),e._v(" Features")]),e._v(" "),t("ul",[t("li",[e._v("一条指令占一行，除非是字符串的跨行")]),e._v(" "),t("li",[e._v("字符串需要支持转义")]),e._v(" "),t("li",[e._v("除字符串里内容外，分号后当前行内容是 可选的 'L'+行号+';' + 当前行注释")]),e._v(" "),t("li",[e._v("一行指令的开头可以有若干空白，指令名和指令参数之间可以隔着若干个空白")]),e._v(" "),t("li",[e._v(".local varname  声明变量名")]),e._v(" "),t("li",[e._v("声明常量语法")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  .begin_const\n     "asd"\n     "Hello"\n     " world!"\n  .end_const\n')])])]),t("ul",[t("li",[e._v("声明upvalues语法")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  .begin_upvalue\n     1 0\n  .end_upvalue\n")])])]),t("ul",[t("li",[e._v("声明代码段语法")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('.begin_code\n   loadk %0 const "asd"    ;L12;  %0表示slot 0\n   closure %1 subroutine_2\n   move %2 %1\n   loadk %3 const "Hello"\n   loadk %4 const " world!"\n   call %2 3 1\n   return %0 1\n.end_code\n')])])]),t("ul",[t("li",[e._v(".upvalues 数量   声明upvalues的数量")]),e._v(" "),t("li",[e._v(".func 函数名 maxstacksize params_count use_vararg 声明proto的开始，以及proto的参数输入返回值数量等")]),e._v(" "),t("li",[e._v("loadk, setglobal, return, move等指令对应相应的Lua字节码指令，后面跟着对应参数")]),e._v(" "),t("li",[e._v(".end_func 结束一个proto的声明")]),e._v(" "),t("li",[e._v('一个"do end"块生成唯一一条return指令')])]),e._v(" "),t("h1",{attrs:{id:"指令列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指令列表","aria-hidden":"true"}},[e._v("#")]),e._v(" 指令列表")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n  MOVE Copy a value between registers\n  LOADK Load a constant into a register\n  LOADBOOL Load a boolean into a register\n  LOADNIL Load nil values into a range of registers\n  GETUPVAL Read an upvalue into a register\n  GETTABLE Read a table element into a register\n  SETUPVAL Write a register value into an upvalue\n  SETTABLE Write a register value into a table element\n  NEWTABLE Create a new table\n  SELF Prepare an object method for calling\n  ADD Addition operator\n  SUB Subtraction operator\n  MUL Multiplication operator\n  DIV Division operator\n  MOD Modulus (remainder) operator\n  POW Exponentiation operator\n  UNM Unary minus operator\n  NOT Logical NOT operator\n  LEN Length operator\n  CONCAT Concatenate a range of registers\n  JMP Unconditional jump\n  EQ Equality test\n  LT Less than test\n  LE Less than or equal to test\n  TEST Boolean test, with conditional jump\n  TESTSET Boolean test, with conditional jump and assignment\n  CALL Call a closure\n  TAILCALL Perform a tail call\n  RETURN Return from function call\n  FORLOOP Iterate a numeric for loop\n  FORPREP Initialization for a numeric for loop\n  TFORLOOP Iterate a generic for loop\n  SETLIST Set a range of array elements for a table\n  CLOSURE Create a closure of a function prototype\n  VARARG Assign vararg function arguments to registers\n\n")])])])])},[],!1,null,null,null);a.default=r.exports}}]);