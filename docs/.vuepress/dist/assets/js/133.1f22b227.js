(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{350:function(e,t,r){"use strict";r.r(t);var a=r(0),n=Object(a.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"literal-type类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#literal-type类型","aria-hidden":"true"}},[e._v("#")]),e._v(" Literal Type类型")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("Literal Type类型是一种枚举类型，可以将多个字符串或者数字或者布尔值或者nil字面量作为枚举类型的每一项，\n给枚举类型赋值时必须用兼容的枚举类型或者枚举类型中的字面量值，否则编译期报错。")])]),e._v(" "),r("li",[r("p",[e._v("运行期枚举类型表现出的类型和运行时具体的值的类型一致，也就是说，枚举类型是编译期类型，运行期不存在枚举类型")])]),e._v(" "),r("li",[r("p",[e._v("枚举类型没有构造函数，这点和record类型不一样")])]),e._v(" "),r("li",[r("p",[e._v("语法")]),e._v(" "),r("p",[e._v("type EnumTypeName = LiteralValue1 | LiteralValue2 ...")]),e._v(" "),r("p",[e._v("LiteralValue1 可以使用 LiteralString | LiteralNumber | LiteralInteger | LiteralBool | nil 其中任何一种字面量")])]),e._v(" "),r("li",[r("p",[e._v("例如")]),e._v(" "),r("p",[e._v('type Gender = "male" | "female"\nvar gender: Gender\ngender = "male" -- Correct\ngender = "Chinese" -- Error: 编译错误')]),e._v(" "),r("p",[e._v("function a1(p: true)\nend")]),e._v(" "),r("p",[e._v("function a2(p: 'Chinese')\nend")]),e._v(" "),r("p",[e._v("let a3: string = gender -- 枚举类型的变量可以显式降级到枚举值的类型")]),e._v(" "),r("p",[e._v('-- Literal Type类型也可以拼接\ntype Cat = "whiteCat" | "blackCat"\ntype Dog = "husky" | "corgi"\ntype Pets = Cat | Dog\n-- 等效于 type Pets = "whiteCat" | "blackCat" | "husky" | "corgi"')]),e._v(" "),r("p",[e._v('type Falsy = "" | 0 | false | nil')])])])])},[],!1,null,null,null);t.default=n.exports}}]);